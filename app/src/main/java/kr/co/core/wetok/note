private void getTerms() {
        ReqBasic server = new ReqBasic(act, NetUrls.ADDRESS) {
            @Override
            public void onAfter(int resultCode, HttpResult resultData) {
                if (resultData.getResult() != null) {
                    try {
                        JSONObject jo = new JSONObject(resultData.getResult());

                        if(jo.getString("result").equalsIgnoreCase("Y")) {

                        } else {

                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                        Common.showToastNetwork(act);
                    }
                } else {
                    Common.showToastNetwork(act);
                }
            }
        };

        server.setTag("");
        server.addParams("siteUrl", NetUrls.SITEURL);
        server.addParams("CONNECTCODE", "APP");
        server.addParams("_APP_MEM_IDX", UserPref.getMidx(act));

        server.addParams("dbControl", "");
        server.execute(true, false);
    }



    server.addParams("siteUrl", NetUrls.SITEURL);
    server.addParams("CONNECTCODE", "APP");
    server.addParams("_APP_MEM_IDX", UserPref.getMidx(act));





    //버전체크 다른예시
    runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                try {
                                    JSONObject jo = new JSONObject(res);

                                    if (jo.getString("result").equalsIgnoreCase("Y")) {
                                        String[] version = jo.getString("value").split("\\.");
                                        String[] version_me = device_version.split("\\.");

                                        for (int i = 0; i < 3; i++) {
                                            int tmp1 = Integer.parseInt(version[i]);
                                            int tmp2 = Integer.parseInt(version_me[i]);

                                            if (tmp2 < tmp1) {
                                                if (i < 2) {
                                                    android.app.AlertDialog.Builder alertDialogBuilder =
                                                            new android.app.AlertDialog.Builder(new ContextThemeWrapper(act, android.R.style.Theme_DeviceDefault_Light_Dialog_Alert));
                                                    alertDialogBuilder.setTitle("업데이트");
                                                    alertDialogBuilder.setMessage("새로운 버전이 있습니다.")
                                                            .setPositiveButton("업데이트 바로가기", new DialogInterface.OnClickListener() {
                                                                @Override
                                                                public void onClick(DialogInterface dialogInterface, int i) {
                                                                    //TODO 업데이트 관련 프로세스 작성해야함
                                                                    finish();
                                                                }
                                                            });
                                                    android.app.AlertDialog alertDialog = alertDialogBuilder.create();
                                                    alertDialog.setCanceledOnTouchOutside(false);
                                                    alertDialog.show();

                                                    return;
                                                } else {
                                                    android.app.AlertDialog.Builder alertDialogBuilder =
                                                            new android.app.AlertDialog.Builder(new ContextThemeWrapper(act, android.R.style.Theme_DeviceDefault_Light_Dialog_Alert));
                                                    alertDialogBuilder.setTitle("업데이트");
                                                    alertDialogBuilder.setMessage("새로운 버전이 있습니다.")
                                                            .setPositiveButton("업데이트 바로가기", new DialogInterface.OnClickListener() {
                                                                @Override
                                                                public void onClick(DialogInterface dialogInterface, int i) {
                                                                    //TODO 업데이트 관련 프로세스 작성해야함
                                                                    finish();
                                                                }
                                                            }).setNegativeButton("기존버전으로 계속하기", new DialogInterface.OnClickListener() {
                                                        @Override
                                                        public void onClick(DialogInterface dialog, int which) {
                                                            startProgram();
                                                        }
                                                    });
                                                    android.app.AlertDialog alertDialog = alertDialogBuilder.create();
                                                    alertDialog.setCanceledOnTouchOutside(false);
                                                    alertDialog.show();

                                                    return;
                                                }
                                            }
                                        }
                                        startProgram();
                                    } else {
                                        startProgram();
                                    }

                                } catch (JSONException e) {
                                    Common.showToastNetwork(act);
                                    e.printStackTrace();
                                }
                            }
                        });